; f_PWM = 62.500
; f_CLK = 16.000.000
; TOP = 255 (8 bit)
; N = f_CLK / (f_PWM * (TOP + 1)) = 1

.include"m328PBdef.inc"

.def temp=r16
.def DC_VALUE=r20

// table with DC values
OCR1A_table:
.db 0, 5, 30, 46, 66, 87, 107, 128, 148, 168, 189, 209, 230, 250, 255

reset:
    // init stack pointer
    ldi temp,low(RAMEND)
    out SPL,temp
    ldi temp,high(RAMEND)
    out SPH,temp
    
    // set PORTB as output
    ser temp
    out DDRB, temp
    
    // set PORTD as input
    clr temp
    out DDRD,temp

    // Vref = 5V, No conversion, prescaler = 1, fast pwm 8-bit
    ldi temp,(1 << WGM10) | (1 << COM1A1)
    sts TCCR1A, temp
    
    ldi temp,(1 << WGM12) | (1 << CS10)
    sts TCCR1B, temp
    
    // DC_VALUE = 128
    ldi ZH, high(OCR1A_table<<1)
    ldi ZL, low(OCR1A_table<<1)

    adiw Z, 7

// start program => load DC_VALUE from OCR1A_table (program memory)
newDC:
    lpm
    mov DC_VALUE, r0
	sts OCR1AL, DC_VALUE

// main program
main:

    in temp, PIND
    
    sbrs temp, 3		; if PD3 is pressed
    rjmp PD3		    ; then go to PD3
    
    sbrs temp, 4		; if PD4 is pressed
    rjmp PD4		    ; then go to PD4
    
    rjmp main
    
PD3:
    ldi r24, low(100)
    ldi r25, high(100)
    rcall delay_mS	    ; debouncing -> delay 10 ms
    cpi DC_VALUE, 250	; if DC_VALUE = 98%
    breq main		    ; then no increment
    adiw Z, 1		    ; else increment by 2 (bytes)
    rjmp newDC		    ; to load newDC

PD4:
    ldi r24, low(100)
    ldi r25, high(100)
    rcall delay_mS	    ; debouncing -> delay 10 ms
    cpi DC_VALUE, 5	    ; if DC_VALUE = 2%
    breq main		    ; then no decrement
    sbiw Z, 1		    ; else decrement by 2 (bytes)
    rjmp newDC		    ; to load newDC

delay_mS:		        ; delay_ms subroutine
    ldi r22, 16
loop_out:
    ldi r21, 249
loop_inn:
    nop
    dec r21
    brne loop_inn
    dec r22
    brne loop_out
    sbiw r24 ,1
    brne delay_mS
    ret
